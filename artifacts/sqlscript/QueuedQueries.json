{
	"name": "QueuedQueries",
	"properties": {
		"description": "Queued query detection",
		"folder": {
			"name": "Performance Tuning/WaitEvent"
		},
		"content": {
			"query": "--Ref: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/analyze-your-workload#queued-query-detection-and-other-dmvs\n\n-- Dedicated SQL pool has the following wait types:\n\n-- LocalQueriesConcurrencyResourceType: \n--     Queries that sit outside of the concurrency slot framework. DMV queries and system functions such as SELECT @@VERSION are examples of local queries.\n-- UserConcurrencyResourceType: \n--     Queries that sit inside the concurrency slot framework. Queries against end-user tables represent examples that would use this resource type.\n-- DmsConcurrencyResourceType: \n--     Waits resulting from data movement operations.\n-- BackupConcurrencyResourceType: \n--     This wait indicates that a database is being backed up. The maximum value for this resource type is 1. If multiple backups have been requested at the same time, the others queue. In general, we recommend a minimum time between consecutive snapshots of 10 minutes.\n\n-- Queued query detection\nSELECT  r.[request_id]                           AS Request_ID\n,       r.[status]                               AS Request_Status\n,       r.[submit_time]                          AS Request_SubmitTime\n,       r.[start_time]                           AS Request_StartTime\n,       DATEDIFF(ms,[submit_time],[start_time])  AS Request_InitiateDuration_ms\n,       r.resource_class                         AS Request_resource_class\nFROM    sys.dm_pdw_exec_requests r\nwhere r.[status]<> 'Completed'\n;\n\n-- The sys.dm_pdw_waits DMV can be used to see which resources a request is waiting for.\n\nSELECT  w.[wait_id]\n,       w.[session_id]\n,       w.[type]                                           AS Wait_type\n,       w.[object_type]\n,       w.[object_name]\n,       w.[request_id]\n,       w.[request_time]\n,       w.[acquire_time]\n,       w.[state]\n,       w.[priority]\n,       SESSION_ID()                                       AS Current_session\n,       s.[status]                                         AS Session_status\n,       s.[login_name]\n,       s.[query_count]\n,       s.[client_id]\n,       s.[sql_spid]\n,       r.[command]                                        AS Request_command\n,       r.[label]\n,       r.[status]                                         AS Request_status\n,       r.[submit_time]\n,       r.[start_time]\n,       r.[end_compile_time]\n,       r.[end_time]\n,       DATEDIFF(ms,r.[submit_time],r.[start_time])        AS Request_queue_time_ms\n,       DATEDIFF(ms,r.[start_time],r.[end_compile_time])   AS Request_compile_time_ms\n,       DATEDIFF(ms,r.[end_compile_time],r.[end_time])     AS Request_execution_time_ms\n,       r.[total_elapsed_time]\nFROM    sys.dm_pdw_waits w\nJOIN    sys.dm_pdw_exec_sessions s  ON w.[session_id] = s.[session_id]\nJOIN    sys.dm_pdw_exec_requests r  ON w.[request_id] = r.[request_id]\nWHERE    w.[session_id] <> SESSION_ID();\n\n\nSSELECT  ro.[name] AS [db_role_name]\nFROM    sys.database_principals ro\nWHERE   ro.[type_desc] = 'DATABASE_ROLE'\nAND     ro.[is_fixed_role] = 0\n;\n\nSELECT  r.name AS role_principal_name\n,       m.name AS member_principal_name\nFROM    sys.database_role_members rm\nJOIN    sys.database_principals AS r            ON rm.role_principal_id      = r.principal_id\nJOIN    sys.database_principals AS m            ON rm.member_principal_id    = m.principal_id\nWHERE   r.name IN ('mediumrc','largerc','xlargerc')\n;\n\nSELECT  SUM([concurrency_slots_used]) as total_granted_slots\nFROM    sys.[dm_pdw_resource_waits]\nWHERE   [state]           = 'Granted'\nAND     [resource_class] is not null\nAND     [session_id]     <> session_id();\n\n\nSELECT   w.[pdw_node_id]\n,        w.[wait_name]\n,        w.[max_wait_time]\n,        w.[request_count]\n,        w.[signal_time]\n,        w.[completed_count]\n,        w.[wait_time]\nFROM    sys.dm_pdw_wait_stats w;\n\n\nSELECT   w.[wait_name], count(w.[request_count]), sum(w.[wait_time])\nFROM    sys.dm_pdw_wait_stats w\ngroup by w.[wait_name]\n-- having sum(w.[wait_time])>0\norder by w.[wait_name]\n;",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "SQLPool01",
				"poolName": "SQLPool01"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}